{"version":3,"sources":["components/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["RangeWithTooltip","createSliderWithTooltip","Range","Visualizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGraphRange","values","_this$state","state","fullData","chartData","i","length","datasets","data","slice","setState","formatRangeTip","value","today","Date","tip","getFullYear","getMonth","getDate","moment","format","labels","_this2","then","arrOfData","_this2$state","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","color","randomColor","push","label","endpoint","result","map","d","t","date","y","backgroundColor","concat","borderColor","lineTension","fill","borderWidth","pointRadius","toConsumableArray","err","return","blue","Math","floor","random","green","abs","react_default","a","createElement","es","options","legend","fontColor","display","responsive","scales","xAxes","bounds","distribution","scaleLabel","labelString","ticks","autoSkip","maxTicksLimit","source","time","unit","type","yAxes","width","height","min","max","allowCross","defaultValue","onChange","tipFormatter","Component","App","promises","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","res","resJson","wrap","_context","prev","fetch","sent","json","abrupt","match","stop","_x","apply","arguments","prom","x","className","components_Visualizer","getData","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c87d8ac2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Range, createSliderWithTooltip} from 'rc-slider';\r\nimport moment from 'moment';\r\n\r\nimport 'rc-slider/assets/index.css';\r\n\r\nconst RangeWithTooltip = createSliderWithTooltip(Range);\r\n\r\nclass Visualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            fullData: [],\r\n            chartData: {labels:['QuiO'], datasets:[]},\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.props.data.then(arrOfData => {\r\n            let {fullData, chartData} = this.state;\r\n            for(let data of arrOfData){\r\n                let color = this.randomColor();\r\n                fullData.push({\r\n                    label: data.endpoint,\r\n                    data: data.result.map(d => ({t: d.date, y: d.value})),\r\n                    backgroundColor: `rgb(${color[0]},${color[1]},${color[2]})`,\r\n                    borderColor: `rgba(${color[0]},${color[1]},${color[2]}, 0.5)`,\r\n                    lineTension: 0.2,\r\n                    fill: false,\r\n                    borderWidth: 3,\r\n                    pointRadius: 2,\r\n                });\r\n                this.setState({fullData: [...fullData]});\r\n            }\r\n           chartData.datasets = fullData;\r\n           this.setState({chartData});\r\n        });\r\n    }\r\n\r\n    randomColor(){\r\n        let blue = Math.floor(Math.random() * 256);\r\n        let green = Math.floor(Math.random() * 256);\r\n        let red = Math.abs(blue - green);\r\n        return [red, green, blue];\r\n    }\r\n\r\n    updateGraphRange = (values) => {\r\n        let {fullData, chartData} = this.state;\r\n        \r\n        for(let i = 0; i < fullData.length; i++){\r\n            chartData.datasets[i].data = fullData[i].data.slice(values[0], values[1]+1);\r\n        }\r\n        this.setState({chartData});        \r\n    }\r\n\r\n    formatRangeTip = (value)=>{\r\n        let today = new Date();\r\n        let tip = new Date(today.getFullYear()-1, today.getMonth(), today.getDate()+value);\r\n        return moment(tip).format('ll');\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <Line \r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        legend: {\r\n                            labels: {\r\n                                fontColor: '#CCC'\r\n                            },\r\n                            display: true\r\n                        },\r\n                        responsive: true,\r\n                        scales: {\r\n                            xAxes:[{\r\n                                bounds: 'data',\r\n                                distribution: 'series',\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    fontColor: '#CCC',\r\n                                    labelString: 'Date'\r\n                                },\r\n                                ticks: {\r\n                                    autoSkip: true,\r\n                                    fontColor: '#CCC',\r\n                                    maxTicksLimit: 20,\r\n                                    source: 'data',\r\n                                },\r\n                                time: {\r\n                                    unit: 'week'\r\n                                },\r\n                                type: 'time',\r\n                            }],\r\n                            yAxes:[{\r\n                                display: true,\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Values',\r\n                                    fontColor: '#CCC'\r\n                                }\r\n                            }],\r\n                        },\r\n                    }}\r\n                    width={1000}\r\n                    height={600}\r\n                    \r\n                />\r\n                <RangeWithTooltip\r\n                    min={0} \r\n                    max={365}\r\n                    allowCross={false}\r\n                    defaultValue={[0,365]}\r\n                    onChange={this.updateGraphRange}\r\n                    tipFormatter={this.formatRangeTip}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualizer;","import React, { Component } from 'react';\nimport './App.css';\nimport Visualizer from './components/Visualizer';\n\nclass App extends Component {\n    async getData() {\n        const urls = [\n            'https://cors-anywhere.herokuapp.com/http://assignment.quio.com/bonding',\n            'https://cors-anywhere.herokuapp.com/http://assignment.quio.com/unbonding',\n            'https://cors-anywhere.herokuapp.com/http://assignment.quio.com/injections',\n            'https://cors-anywhere.herokuapp.com/http://assignment.quio.com/battery',\n            'https://cors-anywhere.herokuapp.com/http://assignment.quio.com/temperature',\n            'https://cors-anywhere.herokuapp.com/http://assignment.quio.com/errors'\n        ];\n\n        //fetches array of data\n        const promises = urls.map(async url => {\n            const res = await fetch(url);\n            const resJson = await res.json();\n            return {endpoint: url.match(/\\/(\\w+)$/)[1], result: resJson};\n        });\n    \n        //retrieves data from promises\n        let data = [];\n        for(let prom of promises){\n            await prom.then(x => {\n                data.push(x);\n            })\n        }\n        \n        return data;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p>QuiO Data: Click one label below to toggle it from graph.</p>\n                    <Visualizer data={this.getData()} />\n                    <p>Adjust Slider above to filter the time series.</p>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}